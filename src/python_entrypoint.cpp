#include <vector>
#include <string>
#include <Python.h>
#include "doxygen.h"
#include "textstream.h"

/**
 * \brief Helper function to convert the vector of TextStream objects
 *        containing the XML output generated by doxygen to a Python list.
 * \return Python tuple containing the generated index.xml data along with a
 *         dict of IDs referenced in the index.xml file as keys and the
 *         corresponding compound XML data as values
 */
static PyObject *convert_xml_data_to_pyobject() {
  std::vector<TextStream> xml_files = generateOutput();
  Py_ssize_t total_files = xml_files.size();

  if (total_files == 0) {
    PyErr_SetString(
      PyExc_RuntimeError, "No XML output generated for provided Doxyfile input");
    return NULL;
  }

  size_t index_xml_idx = total_files - 1;

  // output: tuple[str, dict[str,str]] -> (index.xml, dict[refid, compound.xml])

  // set index.xml file string as 1st tuple value
  PyObject *output = PyTuple_New(2);
  PyTuple_SetItem(output, 0, PyBytes_FromStringAndSize(
      xml_files[index_xml_idx].c_str(), xml_files[index_xml_idx].size())
  );

  // set dict[refid, compound.xml] as 2nd tuple value
  PyObject *compound_xml_files = PyDict_New();
  if (!compound_xml_files) {
    PyErr_SetString(
      PyExc_RuntimeError, "Error during XML output data creation");
    return NULL;
  }
  PyTuple_SetItem(output, 1, compound_xml_files);

  // add all compound XML files to dict as strings (with refid as keys)
  for (size_t i = 0 ; i < index_xml_idx; ++i) {
    PyObject *py_xml_file_content = PyBytes_FromStringAndSize(
      xml_files[i].c_str(), xml_files[i].size());

    int add_failed = PyDict_SetItemString(
      compound_xml_files, xml_files[i].filename(), py_xml_file_content);

    if (add_failed) {
      Py_DecRef(compound_xml_files);
      PyErr_SetString(
        PyExc_RuntimeError, "Error during XML output list population");
      return NULL;
    }
  }

  return output;
}

/**
 * \brief Exported entry point function that can be called directly from
 *        Python to generate XML output based on the provided Doxyfile path.
 * \param [in] self Reference to Python module that will contain this function
 * \param [in] args Tuple of arguments passed to this function
 * \return Python object containing the generated XML data
 */
extern "C" PyObject *generate_xml_output(PyObject *self, PyObject *args) {
  if (!Py_IsInitialized()) {
    Py_Initialize();
  }

  char *doxyfileContent = NULL;
  bool showProgress = false;
  if(!PyArg_ParseTuple(args, "sb", &doxyfileContent, &showProgress)) {
    PyErr_SetString(PyExc_ValueError, "Arguments must be (string, boolean)");
    return NULL;
  }

  initDoxygen(showProgress);
  if (readConfiguration(doxyfileContent) != 0) {
    PyErr_SetString(
      PyExc_RuntimeError, "Doxygen configuration file is malformatted");
    return NULL;
  }
  checkConfiguration();
  adjustConfiguration();
  parseInput();

  PyObject *generated_xml_files = convert_xml_data_to_pyobject();
  return generated_xml_files;
}

static PyMethodDef generateXmlOutput[] = {
  {"generate_xml_output", generate_xml_output, METH_VARARGS,
  "Generate doxygen XML output and return it directly to Python"},
  {NULL, NULL, 0, NULL}
};

static struct PyModuleDef doxygenModule = {
  PyModuleDef_HEAD_INIT,
  "doxygen",
  "Generate doxygen XML output and return it directly to Python",
  -1,
  generateXmlOutput,
  NULL,
  NULL,
  NULL,
  NULL
};

PyMODINIT_FUNC PyInit_libdoxygen(void) {
  return PyModule_Create(&doxygenModule);
}
